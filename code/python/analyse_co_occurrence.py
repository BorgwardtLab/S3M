#!/usr/bin/env python3

import csv
import json
import sys

def distance(S,T):
    """
    Calculates the Euclidean distance between two sequences of varying
    lengths, using early abandon if possible.
    """
    n, m = len(S), len(T)
  
    if n > m:
      n,m = m,n
      S,T = T,S
  
    min_distance = np.inf
  
    for i in range(0, m - n + 1):
      stop         = False
      sum_distance = 0.0
  
      for j,x in enumerate(S):
        y             = T[i+j]
        sum_distance += sqeuclidean(x, y)
  
        # Abandon calculations as soon as the best distance (so far) has
        # been surpassed---adding more values will only increase it.
        if sum_distance >= min_distance:
          stop = True
          break

      if not stop:
        min_distance = sum_distance

    return min_distance

if __name__ == '__main__':
    with open(sys.argv[1]) as f:
        data = json.load(f)

    ####################################################################
    # Generate shapelet pairs
    ####################################################################
    #
    # Candidates are generated by ensuring that one shapelet precedes
    # the other _and_ they are coming from the same time series.

    shapelets = data['shapelets']
    pairs     = []

    for s in shapelets:
        i   = s['index']
        p_i = s['start']
        for t in shapelets:
            j   = t['index']
            p_j = t['start']

            if i == j and p_i < p_j:
                pairs.append((s,t))

    print('There are {} shapelet pair candidates'.format(len(pairs)))

    ####################################################################
    # Load time series
    ####################################################################

    time_series = []

    with open(sys.argv[2]) as f:
        reader = csv.reader(f)
        for row in reader:
            if row[0].startswith('#'):
                continue

            time_series.append( row[1:] )

    print('Loaded {} time series'.format(len(time_series)))
